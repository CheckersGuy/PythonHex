
import random
from multimethod import multimethod

import string


class Union:

    def __init__(self, size):
        padded = size+1
        self.idx = [0 if i == 0 or i == padded - 1 else 1 if j == 0 or j ==
                    padded - 1 else i*padded+j for i in range(padded) for j in range(padded)]

        self.sizes = [padded if i == 0 or i == padded - 1 or j == 0 or j ==
                      padded-1 else 1 for i in range(padded) for j in range(padded)]

    def merge(self, x, y):
        print(f"Merging {x} and {y}")
        self.idx[y] = x

    def root(self, x):
        current = self.idx[x]
        while current != self.idx[current]:
            current = self.idx[current]

        return current

    def is_connected(self, x, y):
        return self.root(x) == self.root(y)


class HexPosition:

    def __init__(self, size):
        self.size = size
        self.padded = size+2
        self.mover = -1
        self.pieces = [0 for _ in range(self.padded * self.padded)]

    # x is the index for the board without padding !
    @multimethod
    def make_move(self, x: int, union: Union):
        row = x//self.size
        col = x % self.size

        padded_row = row+1
        padded_col = col + 1
        padded_index = padded_row * self.padded + padded_col
        self.pieces[padded_index] = self.mover
        # adding all neighbours to the union
        neighbours = self.get_neighbours(padded_index, self.mover)
        for member in neighbours:
            union.merge(padded_index, member)
        self.mover = -self.mover

    @multimethod
    def make_move(self, i: int, j: int, union: Union):
        self.make_move(i*self.size + j, union)

    def print_position(self, board=None):
        if self.size > 26:
            raise ValueError("Max size is 26 due to alphabet column labels.")

        # Create column labels
        columns = list(string.ascii_lowercase[:self.size])

        def square(i, j): return self.pieces[i*self.padded + j]

        # Create default board state if none provided
        if board is None:
            board = [['W' if square(i, j) == 1 else 'B' if square(i, j) == -1 else '.' for j in range(0,
                                                                                                      self.padded)] for i in range(0, self.padded)]

        # Print top column labels
        indent = ' '*3
        print(f"{indent}{'  '.join(columns)}")

        # Print board rows
        for row in range(self.size):
            leading_spaces = ' ' * row
            row_label = f"{row+1:<2}\\"
            row_cells = '  '.join(board[row])
            print(f"{leading_spaces}{row_label} {row_cells} \\{row+1}")

        indent = ' ' * (self.size + 3)
        # Print bottom column labels
        print(f"{indent}{'  '.join(columns)}")

    @multimethod
    def get_neighbours(self, index: int, color: int):
        neighbours = [index-1, index+1, index + self.padded, index -
                      self.padded, index-self.padded+1, index+self.padded-1]
        neighbours = [x for x in neighbours if self.pieces[x] == color]
        return neighbours

    @multimethod
    def get_neighbours(self, i: int, j: int, color: int):
        return self.get_neighbours(i*self.size+j, color)

    def playout(self):
        empty_squares = [idx for idx, value in enumerate(
            self.pieces) if value == 0]
        print(empty_squares)
        # then we can shuffle and check the win condition

        # shuffling the empty square
        random.shuffle(empty_squares)


if __name__ == "__main__":
    position = HexPosition(13)
    union = Union(13)
    position.make_move(3, 3, union)
    neighbours = position.get_neighbours(0, 0, 0)
    print(neighbours)
    for index in neighbours:
        position.pieces[index] = position.mover
    position.print_position()
